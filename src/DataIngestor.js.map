{"version":3,"file":"DataIngestor.js","sourceRoot":"","sources":["DataIngestor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { parse, ParseResult } from 'papaparse';\n\nexport class DataIngestor{\n    public dataLocation: string;\n    // We can make this setable in future versions if this gets reused.\n    public intermediateResultFilePattern = /^StatisticIntermediateResults_\\d+\\.txt$/;\n    public topologyFilePattern = /^StatisticTraversalTopology_\\d+\\.txt$/\n    public constructor(dataLocation: string){\n        this.dataLocation = dataLocation;\n\n    }\n\n    public read(){\n        const experiments = fs.readdirSync(this.dataLocation);\n        const experimentOutputs: Record<string, IExperimentReadOutput> = {}\n        for (const experiment of experiments){\n            // TODO: Push to final output\n            const experimentOutput = this.readFullExperiment(path.join(this.dataLocation, experiment));\n            experimentOutputs[experiment] = experimentOutput;\n        }\n        return  experimentOutputs;\n    }\n    /**\n     * Read result time stamps and total elapsed time per query to construct diefficiency with\n     */\n    public readTimestamps(){\n\n    }\n\n    public isDistinctQuery(query: string){\n        return query.includes('DISTINCT');\n    }\n\n    public getResultsData(queryPath: string, query: string){\n        const files = fs.readdirSync(queryPath)\n            .filter(file => this.intermediateResultFilePattern.test(file));\n        const filterDuplicates = this.isDistinctQuery(query);\n        const queryToProvenanceSize: Record<string, Record<string, number>> = {};\n        const fileData: Record<string, IResultDataProcessed[]> = {};\n        for (const file of files){\n            // Provenance is streamed, so first 'results' have incomplete provenance\n            // This filters out incomplete provenance from results\n            const resultToProvenanceSize: Record<string, number> = {};\n            const dataQuery: IResultDataProcessed[] = [];\n            const data = fs.readFileSync(path.join(queryPath, file), 'utf-8').trim();\n            if (data.length > 0){\n                const lines = data.split('\\n')\n                for (const line of lines){\n                    const resultData: IResultDataRaw = JSON.parse(line);\n                    resultToProvenanceSize[resultData.data] ??= 1;\n                    if (resultData.operation === 'project'){\n                        const prov: string[] = JSON.parse(resultData.provenance);\n                        if (prov.length > resultToProvenanceSize[resultData.data]){\n                            resultToProvenanceSize[resultData.data] = prov.length\n                        }\n                        const processedData: IResultDataProcessed = {\n                            data: resultData.data,\n                            provenance: prov,\n                            operation: resultData.operation,\n                            timestamp: resultData.timestamp\n                        };\n                        dataQuery.push(processedData);\n                    }\n                }    \n            }\n            fileData[file] = dataQuery;\n            queryToProvenanceSize[file] = resultToProvenanceSize;    \n        }\n        const resultsAllInstantiations: IResultDataProcessed[][] = [];\n        for (const file of files){\n            const results: Set<string> = new Set();\n            const resultsQuery: IResultDataProcessed[] = [];\n\n            const data = fileData[file];\n            const provenanceLength = queryToProvenanceSize[file];\n            for (const result of data){\n                // Filter out incomplete provenance annotations\n                if (result.provenance.length === provenanceLength[result.data]){\n                    // Filter out duplicates if distinct is in the query\n                    if (!filterDuplicates || !results.has(result.data)){\n                        results.add(result.data);\n                        resultsQuery.push(result);\n                    }    \n                }\n            }\n            resultsAllInstantiations.push(resultsQuery);\n        }\n        return resultsAllInstantiations;\n    }\n\n    public constructRelevantDocuments(resultsAllInstantiations: Record<any,any>[][]){\n        const relevantDocuments: string[][][] = [];\n        for (let i = 0; i < resultsAllInstantiations.length; i++){\n            const queryRelevant: string[][] = [];\n            for (let j = 0; j < resultsAllInstantiations[i].length; j++){\n                queryRelevant.push(resultsAllInstantiations[i][j].provenance)\n            }\n            relevantDocuments.push(queryRelevant);\n        }\n        return relevantDocuments;\n    }\n\n    /**\n     * Get topologies in format expected by R3 metric, so as edgelist, \n     * traversal path, and seed documents.\n     * @param queryPath \n     * @param query \n     * @returns \n     */\n    public getTopologies(queryPath: string){\n        const topologies: ITopologyOutput[] = [];\n        const files = fs.readdirSync(queryPath)\n            .filter(file => this.topologyFilePattern.test(file));\n        for (const file of files){\n            const topology = JSON.parse(fs.readFileSync(path.join(queryPath, file), 'utf-8').trim());\n            // In our case the seed documents are always zero because there is 1 seed document.\n            // Normally you would get seed document for metadata, but the metadata run failed and\n            // time constraints require this 'hack'\n            const seedDocuments = [ 0 ];\n            const edgeList = this.constructEdgeList(topology, 'unweighted');\n            const edgeListHttp = this.constructEdgeList(topology, 'http');\n            const EdgesInOrder = this.constructEdgesInOrder(topology, 'unweighted');\n            const EdgesInOrderHttp = this.constructEdgesInOrder(topology, 'http');\n            const processedTopology: ITopologyOutput = {\n                edgeList,\n                edgeListHttp: edgeListHttp,\n                dereferenceOrder: EdgesInOrder,\n                dereferenceOrderHttp: EdgesInOrderHttp,\n                indexToNode: topology.indexToNodeDict,\n                nodeToIndex: topology.nodeToIndexDict,\n                nodeMetadata: topology.nodeMetadata,\n                seedDocuments\n            };\n            topologies.push(processedTopology);\n        }\n        return topologies;\n    }\n\n    /**\n     * This function should work to retrieve seed documents for the returned metadata from Comunica.\n     * @param topology \n     * @returns \n     */\n    public getSeedDocuments(topology: Record<string, any>){\n        const seedDocuments: number[] = [];\n        Object.entries(topology.nodeMetadata).forEach(([key, value]: [string, any]) =>{\n            if (value['seed'] === true){\n                seedDocuments.push(Number(key));\n            }\n        })\n        return seedDocuments\n    }\n\n    public constructEdgeList(topology: any, weightType: 'unweighted' | 'http' | 'documentSize'){\n        const edgeList: number[][] = [];\n        Object.entries(topology.adjacencyListOut).forEach(([key, value]: [string, number[]]) => {\n            for (const target of value){\n                const edge = [Number(key), target, 1];\n                if (weightType === 'http'){\n                    const requestTime = topology.nodeMetadata[target]['httpRequestTime'];\n                    if (requestTime && requestTime > 0) edge[2] = requestTime\n                }\n                if (weightType === 'documentSize'){\n                    \n                }\n                edgeList.push(edge);\n            }\n        })\n        return edgeList;\n    }\n\n    public constructEdgesInOrder(topology: any, weightType: 'unweighted' | 'http' | 'documentSize'){\n        return topology.edgesInOrder.map((edge: number[]) => { \n            const weightedEdge = [edge[0], edge[1], 1];\n            if(weightType == 'http'){\n                const requestTime = topology.nodeMetadata[edge[1]]['httpRequestTime'];\n                if (requestTime && requestTime > 0) weightedEdge[2] = requestTime\n            }\n            if(weightType=='documentSize'){\n\n            }\n            return weightedEdge\n        });\n    }\n\n    public readFullExperiment(experimentLocation: string): IExperimentReadOutput{\n        const base64ToDirectory: Record<string, string> = JSON.parse(\n            fs.readFileSync(\n                path.join(experimentLocation, 'base64ToDirectory.json'),\n                'utf-8'\n            )\n        );\n        const templateToResults: Record<string , Record<any,any>[][][]> = {};\n        const templateToRelevantDocuments: Record<string, string[][][][]> = {}; \n        const templateToTopologies: Record<string, ITopologyOutput[][]> = {};\n        Object.entries(base64ToDirectory).forEach(([base64Query, pathToQuery]) => {\n            const query = atob(base64Query);\n            const template = pathToQuery.split(\"/\")[0];\n            templateToRelevantDocuments[template] ??= [];\n            templateToTopologies[template] ??= [];\n            templateToResults[template] ??= [];\n\n            const results = this.getResultsData(\n                path.join(experimentLocation, pathToQuery), query\n            );\n            const relevantDocuments = this.constructRelevantDocuments(results)\n            const topologiesQueryInstantiation = this.getTopologies(\n                path.join(experimentLocation, pathToQuery)\n            );\n            templateToRelevantDocuments[template].push(relevantDocuments);\n            templateToTopologies[template].push(topologiesQueryInstantiation);\n            templateToResults[template].push(results)\n        });\n        const queryTimesRaw = fs.readFileSync(path.join(experimentLocation, 'query-times.csv'), 'utf8');\n        const parsedQueryTimes = parse(queryTimesRaw, {\n            delimiter: ';', // Specify the delimiter\n            header: true,   // Use the first row as the header\n          });\n        const templateToTimings = this.processExperimentQueryTimes(parsedQueryTimes);\n          \n        return { templateToRelevantDocuments, templateToTopologies, templateToResults, templateToTimings }\n    }\n\n    public processExperimentQueryTimes(queryTimes: ParseResult<any>){\n        const templateToResultTimings: Record<string, IResultTimingsTemplate> = {};\n        for (const row of queryTimes.data){\n            templateToResultTimings[row.name] ??= {\n                timestamps: [],\n                timeElapsed: [],\n                timeOut: []\n            };\n            const timedOut = row.error === 'true';\n            templateToResultTimings[row.name].timeOut.push(timedOut);\n            if ( row.time !== undefined ){\n                if (row.time === '0' && timedOut){\n                    templateToResultTimings[row.name].timestamps.push([NaN]);\n                    templateToResultTimings[row.name].timeElapsed.push([NaN]);\n                }\n                else{\n                    templateToResultTimings[row.name].timestamps.push(\n                        row.timestamps.split(' ').map((x: string) => Number(x))\n                    )\n                    templateToResultTimings[row.name].timeElapsed.push(\n                        row.times.split(' ').map((x: string) => Number(x))\n                    );\n                }    \n            }\n        }\n        return templateToResultTimings;\n    }\n}\n\nexport interface ITopologyOutput{\n    edgeList: number[][];\n    edgeListHttp: number[][];\n    dereferenceOrder: number[][];\n    dereferenceOrderHttp: number[][];\n    nodeToIndex: Record<string, number>;\n    indexToNode: Record<number, string>;\n    nodeMetadata: Record<string, Record<any, any>>;\n    seedDocuments: number[];\n}\n\nexport interface IExperimentReadOutput{\n    templateToRelevantDocuments: Record<string, string[][][][]>;\n    templateToTopologies: Record<string, ITopologyOutput[][]>;\n    templateToResults: Record<string , Record<any,any>[][][]>;\n    templateToTimings: Record<string, IResultTimingsTemplate>;\n}\n\n/**\n * Interface of the processed data from the statisticIntermediateResults output log of Comunica\n */\nexport interface IResultDataProcessed{\n    provenance: string[];\n    data: string;\n    operation: string;\n    timestamp: number;\n}\n\n/**\n * Interface of the data in the statisticIntermediateResults output log of Comunica\n */\nexport interface IResultDataRaw{\n    provenance: string;\n    data: string;\n    operation: string;\n    timestamp: number;\n}\n\nexport interface IResultTimingsTemplate{\n    timestamps: number[][];\n    timeElapsed: number[][];\n    timeOut: boolean[];\n}"]}