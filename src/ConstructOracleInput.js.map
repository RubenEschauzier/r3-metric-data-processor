{"version":3,"file":"ConstructOracleInput.js","sourceRoot":"","sources":["ConstructOracleInput.ts"],"names":[],"mappings":";;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAEvC,MAAa,oBAAoB;IAEtB,MAAM,CAAC,GAAG,CAAC,QAAyB,EAAE,UAAkC;QAC3E,MAAM,MAAM,GAA2B,EAAE,CAAC;QAC1C,MAAM,aAAa,GAAG,oBAAoB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClF,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;YAClC,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YAC1C,KAAK,MAAM,SAAS,IAAI,IAAI,EAAC,CAAC;gBAC1B,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC5C,MAAM,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;YACjC,CAAC;QACL,CAAC;QACD,OAAO,MAAM,CAAA;IACjB,CAAC;IACO,MAAM,CAAC,gBAAgB,CAAC,QAAyB,EAAE,UAAkC;QACzF,MAAM,KAAK,GAA6B,EAAE,CAAA;QAC1C,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAA;QAClC,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC5D,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAC,CAAC;YACvC,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;YAC5C,IAAI,UAAU,KAAK,SAAS,EAAC,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YACnC,CAAC;YACD,8DAA8D;YAC9D,MAAM,IAAI,GAAa,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAkB,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACvG,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QACtB,CAAC;QACD,OAAO,KAAK,CAAA;IAChB,CAAC;IAEO,MAAM,CAAC,cAAc,CAAC,QAAoB;QAC9C,MAAM,cAAc,GAA2C,EAAE,CAAA;QACjE,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,GAAC,CAAC,CAAC,IAAI,QAAQ,EAAC,CAAC;YACzC,cAAc,CAAC,IAAI,MAAnB,cAAc,CAAC,IAAI,IAAM,EAAE,EAAC;YAC5B,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;QACtC,CAAC;QACD,OAAO,cAAc,CAAA;IACzB,CAAC;CAGJ;AAzCD,oDAyCC","sourcesContent":["import { ITopologyOutput } from \"./DataIngestor\";\nconst dijkstra = require(\"dijkstrajs\");\n\nexport class ConstructOracleInput{\n\n    public static run(topology: ITopologyOutput, queryToRcc: Record<string, number>){\n        const output: Record<string, number> = {};\n        const shortestPaths = ConstructOracleInput.getShortestPaths(topology, queryToRcc);\n        for (const target of Object.keys(shortestPaths)){\n            const path = shortestPaths[target]\n            const rccDestination = queryToRcc[target];\n            for (const nodeIndex of path){\n                const url = topology.indexToNode[nodeIndex];\n                output[url] = rccDestination;\n            }\n        }\n        return output\n    }\n    private static getShortestPaths(topology: ITopologyOutput, queryToRcc: Record<string, number>){\n        const paths: Record<string, number[]> = {}\n        const edgeList = topology.edgeList\n        const graph = ConstructOracleInput.convertToGraph(edgeList);\n        for (const url of Object.keys(queryToRcc)){\n            const urlAsIndex = topology.nodeToIndex[url]\n            if (urlAsIndex === undefined){\n                throw new Error(\"INVALID URL\");\n            }\n            // Path from root document to whatever query relevant document\n            const path: number[] = dijkstra.find_path(graph, 0, urlAsIndex).map((x: string | number) => Number(x));\n            paths[url] = path;\n        }\n        return paths\n    }\n\n    private static convertToGraph(edgeList: number[][]){\n        const graphStructure: Record<number, Record<number, number>> = {}\n        for (const [from, to, weight=1] of edgeList){\n            graphStructure[from] ??= {};\n            graphStructure[from][to] = weight;\n        }\n        return graphStructure\n    }\n\n    \n}"]}