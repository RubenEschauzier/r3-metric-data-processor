{"version":3,"file":"process.js","sourceRoot":"","sources":["process.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA6B;AAC7B,sDAAyF;AACzF,8CAA8D;AAC9D,kEAAyF;AAGzF,MAAM,QAAQ,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;AAChF,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;AAEtC,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,oBAAoB,EAAE,YAAY,CAAC,CAAC;AACjG,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,oBAAoB,EAAE,eAAe,CAAC,CAAC;AACvG,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;AAE7E,MAAM,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;AAChC,MAAM,QAAQ,GAAG,IAAI,iDAA4B,EAAE,CAAC;AAEpD,KAAK,UAAU,gBAAgB,CAAC,IAA8B;IAC1D,MAAM,cAAc,GAAsD,EAAE,CAAC;IAC7E,MAAM,WAAW,GAAmD,EAAE,CAAC;IACvE,KAAK,IAAI,EAAC,UAAU,EAAE,gBAAgB,EAAC,IAAI,IAAI,EAAC,CAAC;QAC7C,IAAI,UAAU,KAAK,gBAAgB,EAAC,CAAC;YACjC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;YAClE,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;YACrE,cAAc,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;YACtC,WAAW,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC;QAC1C,CAAC;QACD,wEAAwE;IAE5E,CAAC;IACD,iDAA4B,CAAC,WAAW,CAAC,WAAW,EAAE,oBAAoB,CAAC,CAAC;IAC5E,mBAAQ,CAAC,WAAW,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;AAE5D,CAAC;AACD,gBAAgB,CAAC,aAAa,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport { DataIngestor, IDataIngested, IExperimentReadOutput } from '../src/DataIngestor';\nimport { ITemplateR3Metric, R3Metric } from '../src/R3Metric';\nimport { DiefficiencyMetricExperiment, ITemplateDieff } from '../src/DiefficiencyMetric';\nimport * as fs from 'fs';\n\nconst ingestor = new DataIngestor(path.join(__dirname, \"..\", \"data\", \"output\"));\nconst processedData = ingestor.read();\n\nconst r3MetricOutputDir = path.join(__dirname, \"..\", \"data\", \"calculated-metrics\", \"r3-metrics\");\nconst dieffMetricOutputDir = path.join(__dirname, \"..\", \"data\", \"calculated-metrics\", \"dieff-metrics\");\nconst oracelOutputDir = path.join(__dirname, \"..\", \"data\", \"processed-data\");\n\nconst r3Metric = new R3Metric();\nconst diMetric = new DiefficiencyMetricExperiment();\n\nasync function calculateMetrics(data: Generator<IDataIngested>){\n    const r3MetricOutput: Record<string, Record<string, ITemplateR3Metric>> = {};\n    const dieffOutput: Record<string, Record<string, ITemplateDieff>> = {};\n    for (let {experiment, experimentOutput} of data){\n        if (experiment === \"combination_15\"){\n            const r3Result = await r3Metric.run(experiment, experimentOutput);\n            const dieffResult = await diMetric.run(experiment, experimentOutput);\n            r3MetricOutput[experiment] = r3Result;\n            dieffOutput[experiment] = dieffResult;    \n        }\n        // experimentOutput = undefined as unknown as IExperimentReadOutput;    \n        \n    }\n    DiefficiencyMetricExperiment.writeToFile(dieffOutput, dieffMetricOutputDir);\n    R3Metric.writeToFile(r3MetricOutput, r3MetricOutputDir);\n\n}\ncalculateMetrics(processedData);\n"]}